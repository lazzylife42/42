{
    "Generate HPP File": {
        "prefix": "generateHPP",
        "body": [
            "#ifndef ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_HPP",
            "# define ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_HPP",
            "",
            "#include <string>",
            "#include <iostream>",
            "#include \"color.hpp\"",
            "",
            "class ${TM_FILENAME_BASE}",
            "{",
            "public:",
            "\t// Public Constructors and Destructor",
            "\t${TM_FILENAME_BASE}();",
            "\t${TM_FILENAME_BASE}(${TM_FILENAME_BASE} const &src);",
            "\t${TM_FILENAME_BASE}& operator=(const ${TM_FILENAME_BASE} &rhs);",
            "\t~${TM_FILENAME_BASE}();",
            "\t// Public Methods",
            "",
            "protected:",
            "\t// Protected members",
            "};",
            "",
            "#endif"
        ],
        "description": "Generate HPP file with public and protected sections"
    },
    "Generate CPP File": {
        "prefix": "generateCPP",
        "body": [
            "#include <string>",
            "#include <iostream>",
            "#include \"${TM_FILENAME_BASE}.hpp\"",
            "",
            "${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}::${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}()",
            "{",
            "\tstd::cout << GRN << \"Constructor called for \" << this->get${1:/capitalize}() << RST << std::endl;",
            "\treturn;",
            "}",
            "",
            "${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}::${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}(const ${TM_FILENAME_BASE/(.*)/${1:/capitalize}/} &src)",
            "{",
            "\t*this = src;",
            "\treturn;",
            "}",
            "",
            "${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}& ${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}::operator=(const ${TM_FILENAME_BASE/(.*)/${1:/capitalize}/} &rhs)",
            "{",
            "\tif (this != &rhs)",
            "\t\tthis->_${2:data} = rhs.get${1:/capitalize}();",
            "\treturn *this;",
            "}",
            "",
            "${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}::~${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}()",
            "{",
            "\tstd::cout << RED << \"~Destructor called for \" << this->get${1:/capitalize}() << \" ~\" << RST << std::endl;",
            "\treturn;",
            "}"
        ],
        "description": "Generate CPP file for Sample class"
    },
    "Generate Color Header": {
        "prefix": "generateColor",
        "body": [
            "#ifndef COLOR_HPP",
            "# define COLOR_HPP",
            "",
            "#define RST \"\\033[0m\"",
            "#define RED \"\\033[1;31m\"",
            "#define GRN \"\\033[1;32m\"",
            "#define YEL \"\\033[1;33m\"",
            "#define BLU \"\\033[1;34m\"",
            "#define MAG \"\\033[1;35m\"",
            "#define CYA \"\\033[1;36m\"",
            "#define WHT \"\\033[1;37m\"",
            "#define CLR \"\\033[2J\\033[1;1H\"",
            "",
            "#endif"
        ],
        "description": "Generate Color Header file"
    }
}
